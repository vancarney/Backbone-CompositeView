// Generated by CoffeeScript 1.7.1
var Backbone, global, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

global = typeof exports !== "undefined" && exports !== null ? exports : window;

_ = (typeof exports !== 'undefined' ? require('underscore') : global)._;

Backbone = typeof exports !== 'undefined' ? require('backbone') : global.Backbone;

(function($) {
  return Backbone.CompositeView = (function(_super) {
    __extends(CompositeView, _super);

    function CompositeView() {
      return CompositeView.__super__.constructor.apply(this, arguments);
    }

    CompositeView.prototype.collection = null;

    CompositeView.prototype.__children = [];

    CompositeView.prototype.__parent = null;

    CompositeView.prototype.createChildren = function() {
      if (typeof this.subviews !== 'undefined' && (this.subviews != null) && _.isObject(this.subviews)) {
        _.each(this.subviews, ((function(_this) {
          return function(view, selector) {
            if (typeof view === 'undefined') {
              return;
            }
            return _.each(_this.$el.find(selector), function(v, k) {
              return _this.__children.push((_this[selector] = new view({
                el: v,
                __parent: _this
              })));
            });
          };
        })(this)));
        this.delegateEvents();
      }
      this.childrenComplete();
      return this.render();
    };

    CompositeView.prototype.getElement = function() {
      return this.$el;
    };

    CompositeView.prototype.setElement = function(el) {
      if (el) {
        this.$el = $(this.el = el);
      }
      this.delegateEvents();
      return this;
    };

    CompositeView.prototype.setCollection = function(c) {
      if (this.__collection) {
        this.__collection.off("change reset add remove");
      }
      (this.__collection = c).on("change reset add remove", this.render, this);
      return this;
    };

    CompositeView.prototype.getCollection = function() {
      return this.__collection;
    };

    CompositeView.prototype.getChildren = function() {
      return this.__children;
    };

    CompositeView.prototype.getChild = function(sel) {
      if (typeof clazz !== 'function') {
        throw 'clazz must be type <Function>';
      }
      return this.__children[sel] || null;
    };

    CompositeView.prototype.addChild = function(sel, clazz, opts) {
      if (typeof clazz !== 'function') {
        throw 'clazz must be type <Function>';
      }
      this.subviews[sel] = clazz;
      if (!(((opts != null ? opts.create : void 0) != null) && opts.create === false)) {
        this.createChildren();
      }
      return this;
    };

    CompositeView.prototype.removeChild = function(sel, opts) {
      if (!sel) {
        return;
      }
      if (typeof sel === 'string') {
        if (this.__children[sel] != null) {
          this.__children[sel].remove();
          delete this.__children[sel];
        }
      } else {
        throw 'param sel must be CSS Selector String';
      }
      return this;
    };

    CompositeView.prototype.replaceChild = function(sel, clazz) {
      if (!((sel != null) && typeof sel === 'string')) {
        throw 'param sel must be CSS Selector String';
      }
      if (typeof sel === 'string' && clazz instanceof Backbone.View) {
        this.__children[sel] = clazz;
      }
      return this;
    };

    CompositeView.prototype.removeAllChildren = function() {
      var sel, _i, _len, _ref;
      _ref = _.keys(this.__children);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sel = _ref[_i];
        this.$(sel).remove();
        delete this[sel];
        delete this.__children[sel];
      }
      return this;
    };

    CompositeView.prototype.childrenComplete = function() {
      return this;
    };

    CompositeView.prototype.initialize = function(o) {
      _.extend(this, Backbone.Events);
      if ((o != null) && o.el) {
        this.setElement(o.el);
      }
      if ((o != null) && o.collection) {
        this.setCollection(o.collection);
      }
      if ((o != null) && o.__parent) {
        this.__parent = o.__parent;
      }
      if (typeof this.init === 'function') {
        if (o != null) {
          this.init(o);
        } else {
          this.init();
        }
      }
      return this.createChildren();
    };

    return CompositeView;

  })(Backbone.View);
})(jQuery);
